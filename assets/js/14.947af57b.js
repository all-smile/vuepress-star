(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{487:function(t,s,a){t.exports=a.p+"assets/img/0002.4abc7ad2.png"},553:function(t,s,a){"use strict";a.r(s);var n=a(51),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"设计模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v('前端设计模式： "单策代迭发命组 模享职中装适外"')])]),t._v(" "),n("h2",{attrs:{id:"_1-订阅-发布模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-订阅-发布模式"}},[t._v("#")]),t._v(" 1.订阅-发布模式")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("eventBus")])]),t._v(" "),n("li",[n("p",[t._v("vue的数据响应式原理就是基于发布订阅模式实现的")])])]),t._v(" "),n("h2",{attrs:{id:"_2-策略模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-策略模式"}},[t._v("#")]),t._v(" 2.策略模式")]),t._v(" "),n("p",[t._v("简单来时就是把一写具有相关性的工具方法，组合起来，以方便调用和后期增删修等维护")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" operationType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reduce'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h2",{attrs:{id:"_3-单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-单例模式"}},[t._v("#")]),t._v(" 3.单例模式")]),t._v(" "),n("p",[t._v("譬如做一个全局的弹窗原型，当需要的时候就调用生成弹窗，但是没有必要实例化多个弹窗对象，只要实例化一次然后修改里面的属性参数就可以了")]),t._v(" "),n("h2",{attrs:{id:"_4-装饰器模式decorator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-装饰器模式decorator"}},[t._v("#")]),t._v(" 4.装饰器模式Decorator")]),t._v(" "),n("p",[t._v("原有的函数或组件不变，只是扩展、引用了一些方法")]),t._v(" "),n("p",[t._v("如：redux 中的@connect，增加了props,state... 使用就是@XX，（ng中的注解）")]),t._v(" "),n("p",[t._v("eg: 就像是一个房子，进行装修（软装）")]),t._v(" "),n("p",[t._v("v-input, v-checkbox")]),t._v(" "),n("p",[t._v("高阶组件，（相对于低阶组件来说，就是基础组件的二次封装，譬如业务组件：下拉搜索选择）")]),t._v(" "),n("h2",{attrs:{id:"_5-代理模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-代理模式"}},[t._v("#")]),t._v(" 5.代理模式")]),t._v(" "),n("p",[t._v("为一个对象提供一个代用品或占位符，以便控制对它的访问")]),t._v(" "),n("p",[t._v("图片懒加载：先使用一个loading图，等图片加载好了，在放到img的src属性上")]),t._v(" "),n("p",[t._v("函数防抖节流也是代理的一种")]),t._v(" "),n("p",[t._v("事件冒泡事件捕获")]),t._v(" "),n("h2",{attrs:{id:"_6-中介者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-中介者模式"}},[t._v("#")]),t._v(" 6.中介者模式")]),t._v(" "),n("p",[t._v("redux和vuex都是中介者模式的实际应用，把共享数据抽离成一个单独的store，每个需要用到的组件都store这个中介来操作对象。"),n("br"),t._v("\n目的是减少耦合")]),t._v(" "),n("h2",{attrs:{id:"_7-工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-工厂模式"}},[t._v("#")]),t._v(" 7.工厂模式")]),t._v(" "),n("p",[t._v("提供创建对象的接口，把对象的创建工作转交给一个外部对象。通俗的讲就是有一个模子，批量去生产。  目的是为了消除对象之间的耦合")]),t._v(" "),n("p",[t._v("eg: 常见的弹窗，message, 对外提供调用方法，然后调用方法新建弹窗或实例化。")]),t._v(" "),n("h2",{attrs:{id:"_8-享元模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-享元模式"}},[t._v("#")]),t._v(" 8.享元模式")]),t._v(" "),n("p",[t._v("比方说一个工厂生产了50个男内衣和50个女内衣，想要找模特拍广告宣传，一般的只需要找一男一女就可以了，而而不是找50个男模特和50个女模特。用代码实现就是采用享元模式，衣服原型-实例化50个男内衣50个女内衣，人原型-实例化男人和女人，衣服和人的原型有相关关系，彼此通过对外提供接口以达到人和衣服结合，然后拍照。")]),t._v(" "),n("p",[t._v("再比如弹窗，创建一个弹窗原型对外提供接口，需要用到的时候直接调用传入不同的参数就可以了，没有必要实例化多次。"),n("br"),t._v("\n其实就是抽象化提取组件")]),t._v(" "),n("h2",{attrs:{id:"_9-责任链模式-职责链模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-责任链模式-职责链模式"}},[t._v("#")]),t._v(" 9.责任链模式（职责链模式）")]),t._v(" "),n("p",[t._v("使得多个对象都有机会处理请求，从而避免了请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止，这就叫做职责链模式")]),t._v(" "),n("p",[t._v("eg: node,处理请求，")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("app"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("电商预定商品，预定额500，实付减100；预定额200，实付减50。")]),t._v(" "),n("p",[t._v("预定500的处理函数，预定200的处理函数，")]),t._v(" "),n("p",[t._v("传入参数调用，处理函数依次进行捕捉拦截，如果不满足某一个处理函数的条件则放行到下一个处理函数，这样形成一个职责链。")]),t._v(" "),n("p",[t._v("后续若增加300的预定金额，直接编写预定额为300的处理函数，然后注册进责任链即可。")]),t._v(" "),n("h2",{attrs:{id:"_10-适配器模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-适配器模式"}},[t._v("#")]),t._v(" 10.适配器模式")]),t._v(" "),n("p",[t._v("常见的，后端接口返回的数据在前端不能直接使用，需要做转化，这个时候就使用到适配器模式")]),t._v(" "),n("p",[t._v("只关心输入输出数据，正向和反向，有点类似于webpack的loader(只关心输入输出)")]),t._v(" "),n("p",[t._v("文件预览适配器")]),t._v(" "),n("p",[n("img",{attrs:{src:a(487),alt:""}})])])}),[],!1,null,null,null);s.default=r.exports}}]);